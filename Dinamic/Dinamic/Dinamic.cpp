/// \file Dinamic.cpp
/// \brief тело основной программы
/// \brief Dynamic programming - Динамическое программирование
/// \brief Вариант 6 - Задача Отравленный пирог
/// \brief Для игры «Отравленный пирог» используется прямоугольный пирог, разделенный на 
/// \brief M «строк» горизонтальными разрезами и на N «столбцов» – вертикальными.
/// \brief Таким образом, пирог должен быть разбит на M × N клеток, правая нижняя из которых «отравлена».
/// \brief Играют двое игроков, ходы делаются по очереди. 
/// \brief Каждый ход заключается в том, что игрок выбирает одну из еще не съеденных клеток пирога и съедает все клетки,
/// \brief расположенные левее и выше выбранной (в том числе и выбранную). 
/// \brief Проигрывает тот, кто съедает отравленную клетку.
/// \brief Входные данные Данные во входном файле расположены в следующем порядке: M, N (1 ≤ M, N ≤ 9), X1, ...,XM. 
/// \brief Здесь Xi – число оставшихся клеток в i-м снизу горизонтальном ряду. 
/// \brief Все числа во входном файле разделяются пробелами и/или символами перевода строки.
/// \brief Выходные данные В первую строку выходного файла необходимо вывести количество различных выигрышных ходов К,
/// \brief а в последующие K строк – сами выигрышные ходы.
/// \brief Каждый ход задается парой чисел (i, j), где i – номер (снизу) горизонтального ряда, а j –номер (справа) вертикального ряда,
/// \brief которому принадлежит выбранная клетка (1 ≤ i ≤ M, 1≤ j ≤ N). 
/// \brief https://github.com/ivtipm/Data-structures-and-algorithms/blob/main/tasks/task_s1_dynamic_programming.md
/// \author Бурдинская Наталья ВМК-22
/// \date 10.03.2024

#include "ModulDinamic.h" // вызов заголовочного файла ModulDynamic

int main()
{
	// «Rus» локализация произойдёт на русский язык
	setlocale(LC_ALL, "russian");
	srand(time(0));
	// Тестирование функций
	Test_Search_pie();
	cout << endl;
	Test_Rezult_Eating();
	cout << endl;

	int n, m; // размерность пирога
	cout << "Введите два целых числа для деления пирога на части" << endl;
	// сохраняем их в m и n
	cout << "n = "; cin >> n;
	cout << "m = "; cin >> m;
	cout << endl;
	// задать массив на [n][m] кусков
	int** a = Memo_Array(n, m);
	// вывести массив на экран
	Screen_Array(a, n, m);
	// открываем файл для записи input.txt
	WriteInFile(infile, a, n, m);
	// открываем файл для записи output.txt
	ofstream Fout(outfile, ios::out);
	Fout << "Начало" << endl;
	Fout << endl;
	Fout.close(); // функция close() закрывает поток файла

	// игра с компьютером
	// [x][y] - координаты куска пирога
	// z - кто первый ходит, 0 - компьютер, 1 - вы
	int x, y, z;
	cout << "Чей первый ход ???" << endl;
	cout << "Введите 0 - ход выполняет компьютер, 1 - ваш ход." << endl;
	cout << "ход = "; cin >> z;
	cout << endl;

	// поедание пирога
	Eating_pie(a, n, m, z);
	cout << endl;
	//Del_Array(a, n, m);
	return 0;
} ///*** игра с машиной